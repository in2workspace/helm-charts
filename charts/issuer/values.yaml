issuer-api:
  app:
    profile: prod
    logLevel:
      app: INFO
      security: INFO
    internalServerPort: 8080
    mail:
      host: smtp.ionos.de
      port: 587
      username: user
      password: password
      existingSecret:
        enabled: false
        name: mail-secret
        userKey: mail-username
        passwordKey: mail-password
      properties:
        mail:
          smtp:
            auth: true
            starttls:
              enable: true
            ssl:
              trust: smtp.ionos.de
    remoteSignature:
      externalDomain:
        # if deployed locally set to false
        externalService: true
        scheme: http
        # change by the external url or set to localhost if deployed locally
        host: example.org
        # internalPort is only used if externalService is false
        internalPort: 30003
      internalDomain: http://dss:8050
    api:
      externalDomain:
        # if deployed locally set to false
        externalService: true
        scheme: http
        # change by the external url or set to localhost if deployed locally
        host: example.org
        # internalPort is only used if externalService is false
        internalPort: 30001
        path: /
      internalDomain: http://issuer-api:8080
      configSource: yaml
      cacheLifetimeCredentialOffer: 10
      cacheLifetimeVerifiableCredential: 10
    authServer:
      provider: keycloak
      externalDomain:
        # if deployed locally set to false
        externalService: true
        scheme: http
        # change by the external url or set to localhost if deployed locally
        host: example.org
        # internalPort is only used if externalService is false
        internalPort: 30002
        path: /
      internalDomain: http://issuer-keycloak:8080
      realm: CredentialIssuer
      client:
        clientId: oidc4vci-wallet-client
        clientSecret: oidc4vci-wallet-client-secret
        username: user
        password: user
        existingSecret:
          enabled: false
          name: auth-secret
          clientSecretKey: authServerClientSecret
          clientPasswordKey: authServerClientPassword
      paths:
        tokenPath: /realms/CredentialIssuer/protocol/openid-connect/token
    ui:
      externalDomain:
        # if deployed locally set to false
        externalService: true
        scheme: http
        # change by the external url or set to localhost if deployed locally
        host: example.org
        # internalPort is only used if externalService is false
        internalPort: 30000
        path: /
      internalDomain: http://wallet-ui:8080
    trustFramework:
      url: "http://localhost:8080"
    knowledgebase:
      url: "http://knowledgebase.com"
    defaultSigner:
      commonName: <COMMON_NAME>
      country: <COUNTRY>
      email: <EMAIL>
      organizationIdentifier: <ORGANIZATION_IDENTIFIER>
      organization: <ORGANIZATION>
      serialNumber: <SERIAL_NUMBER>
      existingSecret:
        enabled: false
        name: default-signer-secret
        commonName: common-name
        country: country
        email: email
        organizationIdentifier: organization-identifier
        organization: organization
        serialNumber: serial-number
    issuerIdentity:
      credentialDidKey: <CREDENTIAL_DID_KEY>
      vcJwt: <ENCRYPTED_VC>
      crypto:
        privateKey: <PRIVATE_KEY>
      existingSecret:
        enabled: false
        name: issuer-identity-secret
        vc: vc
        privateKey: private-key
        credentialDidKey: credential-did-key
  db:
    externalService: false
    schema: public
    host: issuer-postgres
    port: 5432
    name: issuer
    username: postgres
    password: postgres
    existingSecret:
      enabled: false
      name: db-secret
      key: db-password

issuer-ui:
  app:
    internalServerPort: 8080
    loginUrl:
      # if deployed locally set to false
      externalService: true
      scheme: http
      # change by the external url or set to localhost if deployed locally
      host: example.org
      # internalPort is only used if externalService is false
      internalPort: 30002
      path: /realms/CredentialIssuer
    clientId: account-console
    scope: openid profile email offline_access
    grantType: code
    baseUrl:
      # if deployed locally set to false
      externalService: true
      scheme: http
      # change by the external url or set to localhost if deployed locally
      host: example.org
      # internalPort is only used if externalService is false
      internalPort: 30001
      path: /
    walletUrl:
      # if deployed locally set to false
      externalService: true
      scheme: http
      # change by the external url or set to localhost if deployed locally
      host: example.org
      # internalPort is only used if externalService is false
      internalPort: 30003
      path: /
    walletUrlTest:
      # if deployed locally set to false
      externalService: true
      scheme: http
      # change by the external url or set to localhost if deployed locally
      host: example.org
      # internalPort is only used if externalService is false
      internalPort: 30003
      path: /
    knowledgebaseUrl:
      # if deployed locally set to false
      externalService: true
      scheme: http
      # change by the external url or set to localhost if deployed locally
      host: example.org
      # internalPort is only used if externalService is false
      internalPort: 30004
      path: /
    profile: local
    procedures: /api/v1/procedures
    saveCredential: /api/v1/credentials?type=LEARCredentialEmployee
    credentialOfferUrl: /api/v1/credential-offer
    notification: /api/v1/notifications

dome-issuer-keycloak:
  # Keycloak Configuration
  keycloak:
    proxy: edge
    logsCertsLevel: TRACE
    logLevel: DEBUG
    admin:
      username: admin
      password: admin
      existingSecret:
        enabled: false
        name: keycloak-secrets
        passwordKey: keycloakAdminPassword
    relativePath: /keycloak
    hostname:
      url:
        # if deployed locally set to false
        externalService: true
        scheme: http
        # change by the external url or set to localhost if deployed locally
        host: example.org
        # internalPort is only used if externalService is false
        internalPort: 30002
        path: /
      adminUrl:
        # if deployed locally set to false
        externalService: true
        scheme: http
        # change by the external url or set to localhost if deployed locally
        host: example.org
        # internalPort is only used if externalService is false
        internalPort: 30002
        path: /
    https:
      trustStoreFile: /opt/keycloak/truststore/truststore.jks
      trustStorePassword: pempas
      existingSecret:
        enabled: false
        name: keycloak-secrets
        trustStorePasswordKey: keycloakTrustStorePassword
      clientAuth: request
    db:
      host: issuer-keycloak-postgres
      port: 5432
      externalService: true
      name: cred
      username: postgres
      password: postgres
      existingSecret:
        enabled: false
        name: keycloak-secrets
        passwordKey: keycloakDbPassword
    mail:
      host: smtp.ionos.de
      port: 587
      from: example@example.org
      fromDisplayName: Example
      replyTo: example@example.org
      username: user
      password: password
      existingSecret:
        enabled: false
        name: mail-secret
        userKey: mail-username
        passwordKey: mail-password
      properties:
        mail:
          smtp:
            auth: true
            starttls:
              enable: true
            ssl:
              enable: false

  # Issuer API Configuration
  issuerApi:
    url: http://issuer-api:8080
    externalUrl:
      # if deployed locally set to false
      externalService: true
      scheme: http
      # change by the external url or set to localhost if deployed locally
      host: example.org
      # internalPort is only used if externalService is false
      internalPort: 30001
      path: /

  # Pre-authorization Configuration
  preAuth:
    lifespan: 10
    lifespanTimeUnit: MINUTES

  # Token Configuration
  token:
    expiration: 2592000

issuer-postgres:
  # -- should the postgresql deployment be enabled
  enabled: true
  # -- overrides the generated name, provides stable service names - this should be avoided if multiple instances are available in the same namespace
  fullnameOverride: issuer-postgres
  # -- overrides the generated name, provides stable service names - this should be avoided if multiple instances are available in the same namespace
  nameOverride: issuer-postgres
  ## auth configuration for the database
  auth:
    # -- username to be used
    username: postgres
    # -- should the default postgres user be enabled
    enablePostgresUser: true
    # -- password to be used
    password: postgres
  ## configuration of the postgres primary replica
  primary:
    ## provide db initialization
    initdb:
      ## provide scripts for initialization
      scripts:
        # -- create the database
        create.sh: |
          {{- if not .Values.db.externalService }}
          psql postgresql://postgres:${POSTGRES_PASSWORD}@localhost:5432 -c "CREATE DATABASE issuer;"
          psql postgresql://postgres:${POSTGRES_PASSWORD}@localhost:5432/issuer -c "CREATE SCHEMA IF NOT EXISTS public AUTHORIZATION postgres;"
          {{- end }}


issuer-keycloak-postgres:
  # -- should the postgresql deployment be enabled
  enabled: true
  # -- overrides the generated name, provides stable service names - this should be avoided if multiple instances are available in the same namespace
  fullnameOverride: issuer-keycloak-postgres
  # -- overrides the generated name, provides stable service names - this should be avoided if multiple instances are available in the same namespace
  nameOverride: issuer-keycloak-postgres
  ## auth configuration for the database
  auth:
    # -- username to be used
    username: postgres
    # -- should the default postgres user be enabled
    enablePostgresUser: true
    # -- password to be used
    password: postgres
  ## configuration of the postgres primary replica
  primary:
    ## provide db initialization
    initdb:
      ## provide scripts for initialization
      scripts:
        # -- create the database
        create.sh: |
          psql postgresql://postgres:${POSTGRES_PASSWORD}@localhost:5432 -c "CREATE DATABASE cred;"