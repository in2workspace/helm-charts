# Default values for example.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: in2workspace/in2-wallet-api
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: v1.4.3

# This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
# fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
# runAsNonRoot: true
# runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 80

ingress:
  enabled: true
  className: ""
  annotations:
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/rewrite-target: /$2
  hosts:
    - host: chart-example.local
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
# requests:
#   cpu: 100m
#   memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /health
  initialDelaySeconds: 40
  failureThreshold: 6
  periodSeconds: 10
readinessProbe:
  httpGet:
    path: /health
  initialDelaySeconds: 40
  failureThreshold: 6
  periodSeconds: 10

# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

# scripts before container initializes
initContainers:
  # a script can be added to wait for keycloak to be ready before initializing
  # - name: wait-for-keycloak
  #   image: curlimages/curl
      # url has to match keycloak health url
  #   command:
  #     - sh
  #     - -c
  #     - >
  #       timeout 75 sh -c '
  #         until curl -s http://dome-wallet-keycloak:80/keycloak/health;
  #         do echo "waiting for keycloak..."; sleep 5; done'

# specific app (API) configuration
app:
  logLevel: DEBUG
  authServer:
    externalUrl: example-external-domain.org/keycloak/realms/wallet
    internalUrl: example-internal-domain.org/keycloak/realms/wallet
  cors:
    # expects a string of url's separated with comma and space
    allowedOrigins: "www.example-cors.com, www.example-cors-two.com"
  vault:
    provider: hashicorp
    url: http://vault-server:8200
    token: defaultToken
    existingSecret:
      # -- should an existing secret be used
      enabled: false
      # -- name of the secret
      name: dome-wallet-backend-secret
      # -- key to retrieve the token from
      key: vault-token
  ebsiTest:
    url: http://dome-wallet-keycloak:80/realms/wallet/protocol/openid-connect/token
    client:
      id: user-registry-client
      secret: defaultSecret
      existingSecret:
        # -- should an existing secret be used
        enabled: false
        # -- name of the secret
        name: dome-wallet-backend-secret
        # -- key to retrieve the password from
        key: ebsi-client-secret
    userData:
      name: admin
      password: defaultPassword
      existingSecret:
        # -- should an existing secret be used
        enabled: false
        # -- name of the secret
        name: dome-wallet-backend-secret
        # -- key to retrieve the password from
        key: ebsi-user-password
  db:
    schema: wallet
    host: dome-wallet-postgres
    port: 5432
    name: wallet
    username: postgres
    password: postgres
    existingSecret:
      enabled: false
      name: dome-wallet-backend-secret
      key: postgres-password

