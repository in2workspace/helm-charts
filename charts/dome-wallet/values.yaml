fullNameOverride: ""
nameOverride: ""

# Ingress configuration
ingress:
  enabled: true
  className: "nginx"
  labels: {}
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
  enableTLS: false
  clusterIssuer: "letsencrypt-in2-test-issuer"
  host: "localhost"
  backend:
    annotations:
      nginx.ingress.kubernetes.io/use-regex: "true"
      nginx.ingress.kubernetes.io/rewrite-target: /$2
  frontend:
    annotations:


## configuration for the dome-wallet-backend
dome-wallet-backend:
  # -- should be enabled?
  enabled: true
  fullnameOverride: "dome-wallet-backend"
  image:
    # -- image pull policy
    pullPolicy: Always
    # -- image tag
    tag: v1.4.3
  # ingress specific configuration
  ingress:
    enabled: false
  # scripts before container initializes
  initContainers:
    # wait for keycloak to be ready before initializing
    - name: wait-for-keycloak
      image: curlimages/curl
      # url has to match keycloak health url
      command:
        - sh
        - -c
        - >
          timeout 75 sh -c '
            until curl -s http://dome-wallet-keycloak:80/keycloak/health;
            do echo "waiting for keycloak..."; sleep 10; done'
  ## deployment specific configuration
  app:
    logLevel: DEBUG
    authServer:
      externalUrl: http://localhost/keycloak/realms/wallet
      internalUrl: http://localhost/keycloak/realms/wallet
    cors:
      # expects a string of url's separated with comma and space
      allowedOrigins: "http://localhost.com, https://localhost.com, www.example-cors-two.com"
    vault:
      provider: hashicorp
      url: http://vault-server:8200
      token: defaultToken
      existingSecret:
        # -- should an existing secret be used
        enabled: false
        # -- name of the secret
        name: dome-wallet-sealed-secret
        # -- key to retrieve the token from
        key: vault-token
    ebsiTest:
      # this will fail in the API unless the specified realm, client and user-password are created in the Keycloak instance
      url: http://dome-wallet-keycloak:80/keycloak/realms/wallet/protocol/openid-connect/token
      client:
        id: user-registry-client
        secret: defaultSecret
        existingSecret:
          # -- should an existing secret be used
          enabled: false
          # -- name of the secret
          name: dome-wallet-sealed-secret
          # -- key to retrieve the password from
          key: ebsi-client-secret
      userData:
        name: admin
        password: defaultPassword
        existingSecret:
          # -- should an existing secret be used
          enabled: false
          # -- name of the secret
          name: dome-wallet-sealed-secret
          # -- key to retrieve the password from
          key: ebsi-user-password
  db:
    schema: wallet
    host: dome-wallet-postgres # dome-wallet-postgres?
    port: 5432
    name: wallet
    username: postgres
    password: postgres
    existingSecret:
      enabled: false
      name: dome-wallet-sealed-secret
      key: password

## configuration for the dome-wallet-frontend
dome-wallet-frontend:
  # -- should be enabled?
  enabled: true
  fullnameOverride: "dome-wallet-frontend"
  # -- image pull policy
  pullPolicy: Always
  # -- image tag
  tag: v1.9.0
  ## ingress specific configuration
  ingress:
    enabled: false
  ## deployment specific configuration
  app:
    logsEnabled: false
    colors:
      primary: "#00ADD3"
      primaryContrast: "#ffffff"
      secondary: "#50c8ff"
      secondaryContrast: "#50c8ff"
    logoSrc: "assets/logos/no-image.png"
    faviconSrc: "assets/icons/dome-favicon.png"
    walletApi:
      internalDomain: http://localhost/api
      websocketExternalDomain: ws://localhost/api
    iam:
      externalUrl: http://localhost/keycloak/realms/wallet

## configuration for the dome-wallet-keycloak
# todo: will be disabled when there is centralized keycloak
dome-wallet-keycloak:
  nameOverride: dome-wallet-keycloak
  fullnameOverride: dome-wallet-keycloak
  # -- should be enabled?
  enabled: true
  ## ingress specific configuration
  ingress:
    enabled: true
    className: nginx
    annotations: {}
#      cert-manager.io/cluster-issuer: letsencrypt-in2-test-issuer
    hosts:
      - host: localhost
        paths:
          - path: /keycloak
            pathType: Prefix
    tls:
#      - hosts:
#          - localhost
#        secretName: wallet-tls-secret
  ## deployment specific configuration
  app:
    keycloak:
      hostnameUrl: "http://localhost/keycloak"
      adminUrl: "http://localhost/keycloak"
      relativePath: /keycloak
      admin: admin
      password: admin
      existingSecret:
        # -- should an existing secret be used
        enabled: false
        # -- name of the secret
        name: dome-wallet-sealed-secret
        # -- key to retrieve the password from
        key: keycloak-password
      mail:
        host: smtp.example.org
        port: 587
        from: example@example.org
        fromDisplayName: Example
        replyTo: example@example.org
        username: user
        password: password
        existingSecret:
          enabled: false
          name: mail-secret
          userKey: mail-user
          passwordKey: mail-password
        properties:
          mail:
            smtp:
              auth: true
              starttls:
                enable: true
              ssl:
                enable: false
  db:
    type: postgres
    host: dome-wallet-keycloak-postgres
    port: 5432
    name: keycloak
    username: postgres
    password: postgres
    existingSecret:
      # -- should an existing secret be used
      enabled: false
      # -- name of the secret
      name: dome-wallet-secret
      # -- key to retrieve the password from
      key: keycloak-db-password

## configuration of postgres to be used for the blockchain-connector - see https://github.com/bitnami/charts/tree/main/bitnami/postgresql for details
# todo: will be disabled when there is centralized keycloak
dome-wallet-keycloak-postgresql:
  # -- should the postgresql deployment be enabled
  enabled: true
  # -- overrides the generated name, provides stable service names - this should be avoided if multiple instances are available in the same namespace
  fullnameOverride: dome-wallet-keycloak-postgres
  # -- overrides the generated name, provides stable service names - this should be avoided if multiple instances are available in the same namespace
  nameOverride: dome-wallet-keycloak-postgres
  ## network policy configuration
  networkPolicy:
    enabled: false
  ## persistence volume claim configuration retention policy
  persistentVolumeClaimRetentionPolicy:
    enabled: true
    whenScaled: Retain
    whenDeleted: Retain
  ## auth configuration for the database
  auth:
    # -- username to be used
    username: postgres
    # -- should the default postgres user be enabled
    enablePostgresUser: true
    # -- password to be used
    password: postgres
  ## configuration of the postgres primary replica
  primary:
    # Configuration for Velero backup
    annotations:
      backup.velero.io/backup-volumes: data
    podAnnotations:
      backup.velero.io/backup-volumes: data
    ## provide db initialization
    initdb:
      ## provide scripts for initialization
      scripts:
        # -- create the database as expected by the blockchain-connector
        create.sh: |
          psql postgresql://postgres:${POSTGRES_PASSWORD}@localhost:5432 -c "CREATE DATABASE keycloak;"

## configuration of postgres
# todo: will be disabled when there is centralized database
dome-wallet-postgresql:
  # -- should the postgresql deployment be enabled
  enabled: true
  # -- overrides the generated name, provides stable service names - this should be avoided if multiple instances are available in the same namespace
  # todo dome-wallet-postgres?
  fullnameOverride: dome-wallet-postgres
  # -- overrides the generated name, provides stable service names - this should be avoided if multiple instances are available in the same namespace
  # todo dome-wallet-postgres?
  nameOverride: dome-wallet-postgres
  ## auth configuration for the database
  auth:
    # -- username to be used
    username: postgres
    # -- should the default postgres user be enabled
    enablePostgresUser: true
    # -- password to be used
    password: postgres
    # -- database name to be used
    database: wallet
  ## configuration of the postgres primary replica
  primary:
    ## network policy configuration
    networkPolicy:
      enabled: false
    ## persistence volume claim configuration retention policy
    persistentVolumeClaimRetentionPolicy:
      enabled: true
      whenScaled: Retain
      whenDeleted: Retain
