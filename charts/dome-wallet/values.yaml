global:
  # Ingress configuration
  # todo remove from global?
  ingress:
    enabled: true
    labels:
    className: "nginx"
    sslRedirect: false
    backendProtocol: "HTTP"
    enableTLS: false
    clusterIssuer: "letsencrypt-in2-test-issuer"
    host: "example-host"

fullNameOverride: ""
nameOverride: ""

## configuration for the dome-wallet-backend
dome-wallet-backend:
  # -- should be enabled?
  enabled: true
  image:
    # -- image pull policy
    pullPolicy: Always
    # -- image tag
    tag: v1.4.3
  # ingress specific configuration
  ingress:
    enabled: false
  # has to match ingress port --remove?
  service:
    port: 80
  ## deployment specific configuration
  app:
    # has to match ingress backend path --remove?
    basePath: "/api"
    logLevel: DEBUG
    authServer:
      externalUrl: example-external-domain.org/keycloak/realms/wallet
      internalUrl: example-internal-domain.org/keycloak/realms/wallet
    cors:
      # expects a string of url's separated with comma and space
      allowedOrigins: "www.example-cors.com, www.example-cors-two.com"
    vault:
      provider: hashicorp
      url: http://vault-server:8200
      token: defaultToken
      existingSecret:
        # -- should an existing secret be used
        enabled: false
        # -- name of the secret
        name: wallet-api-token-secret
        # -- key to retrieve the token from
        key: token
    ebsiTest:
      url: http://dome-wallet-keycloak:8080/realms/wallet/protocol/openid-connect/token
      client:
        id: user-registry-client
        secret: defaultSecret
        existingSecret:
          # -- should an existing secret be used
          enabled: false
          # -- name of the secret
          name: wallet-api-client-secret
          # -- key to retrieve the password from
          key: client-secret
      userData:
        name: admin
        password: defaultPassword
        existingSecret:
          # -- should an existing secret be used
          enabled: false
          # -- name of the secret
          name: wallet-api-user-password
          # -- key to retrieve the password from
          key: user-password
  db:
    schema: public # remove?
    host: wallet-postgres # dome-wallet-postgres?
    port: 5432
    name: wallet
    username: postgres
    password: postgres
    existingSecret:
      enabled: false
      name: db-secret
      key: password

## configuration for the dome-wallet-frontend
dome-wallet-frontend:
  # -- image pull policy
  pullPolicy: Always
  # -- image tag
  tag: v1.9.0
  # -- should be enabled?
  enabled: true
  ## ingress specific configuration
  ingress:
    enabled: false
  # has to match ingress port --remove?
  service:
    port: 80
  ## deployment specific configuration
  app:
    logsEnabled: false
    colors:
      primary: "#00ADD3"
      primaryContrast: "#ffffff"
      secondary: "#50c8ff"
      secondaryContrast: "#50c8ff"
    logoSrc: "assets/logos/no-image.png"
    faviconSrc: "assets/icons/dome-favicon.png"
    walletApi:
      internalDomain: https://example-internal-domain.org/wallet-api
      websocketExternalDomain: wss://example-external-domain/wallet-api
    iam:
      externalUrl: https://example-external-domain.org/keycloak/realms/wallet

## configuration for the dome-wallet-keycloak
dome-wallet-keycloak:
  # -- should be enabled?
  enabled: false
  ## ingress specific configuration
  ingress:
    enabled: true
    className: nginx
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-in2-test-issuer
    hosts:
      - host: wallet.dome-marketplace-lcl.org
        paths:
          - path: /keycloak
            pathType: Prefix
    tls:
      - hosts:
          - wallet.dome-marketplace-lcl.org
        secretName: wallet-tls-secret
  ## deployment specific configuration
  app:
    internalServerPort: 8080
    keycloak:
      hostnameUrl: "http://dome-wallet-keycloak/keycloak"
      adminUrl: "http://dome-wallet-keycloak/keycloak"
      relativePath: /keycloak
      admin: admin
      password: admin
      existingSecret:
        # -- should an existing secret be used
        enabled: false
        # -- name of the secret
        name: dome-wallet-keycloak-secret
        # -- key to retrieve the password from
        key: keycloak-password
      mail:
        host: smtp.example.org
        port: 587
        from: example@example.org
        fromDisplayName: Example
        replyTo: example@example.org
        username: user
        password: password
        existingSecret:
          enabled: false
          name: mail-secret
          userKey: mail-user
          passwordKey: mail-password
        properties:
          mail:
            smtp:
              auth: true
              starttls:
                enable: true
              ssl:
                enable: false
  db:
    type: postgres
    host: dome-wallet-keycloak-postgres
    port: 5432
    externalService: false
    name: keycloak
    username: postgres
    password: postgres
    existingSecret:
      # -- should an existing secret be used
      enabled: false
      # -- name of the secret
      name: dome-wallet-keycloak-db-secret
      # -- key to retrieve the password from
      key: keycloak-db-password

## configuration of postgres to be used for the blockchain-connector - see https://github.com/bitnami/charts/tree/main/bitnami/postgresql for details
dome-wallet-keycloak-postgresql:
  # -- should the postgresql deployment be enabled
  enabled: false
  # -- overrides the generated name, provides stable service names - this should be avoided if multiple instances are available in the same namespace
  fullnameOverride: dome-wallet-keycloak-postgres
  # -- overrides the generated name, provides stable service names - this should be avoided if multiple instances are available in the same namespace
  nameOverride: dome-wallet-keycloak-postgres
  ## network policy configuration
  networkPolicy:
    enabled: false
  ## persistence volume claim configuration retention policy
  persistentVolumeClaimRetentionPolicy:
    enabled: true
    whenScaled: Retain
    whenDeleted: Retain
  # configuration for Velero backup
  backup:
    cronjob:
      annotations:
        backup: true
  readReplicas:
    labels:
      backup.velero.io/backup-volumes: data
  ## auth configuration for the database
  auth:
    # -- username to be used
    username: postgres
    # -- should the default postgres user be enabled
    enablePostgresUser: true
    # -- password to be used
    password: postgres
  ## configuration of the postgres primary replica
  primary:
    ## provide db initialization
    initdb:
      ## provide scripts for initialization
      # todo remove?
      scripts:
        # -- create the database as expected by the blockchain-connector
        create.sh: |
          psql postgresql://postgres:${POSTGRES_PASSWORD}@localhost:5432 -c "CREATE DATABASE keycloak;"

## configuration of postgres
dome-wallet-postgresql:
  # -- should the postgresql deployment be enabled
  enabled: true
  # -- overrides the generated name, provides stable service names - this should be avoided if multiple instances are available in the same namespace
  fullnameOverride: wallet-postgres
  # -- overrides the generated name, provides stable service names - this should be avoided if multiple instances are available in the same namespace
  nameOverride: wallet-postgres
  ## auth configuration for the database
  auth:
    # -- username to be used
    username: postgres
    # -- should the default postgres user be enabled
    enablePostgresUser: true
    # -- password to be used
    password: postgres
    # -- database name to be used
    database: wallet
  ## configuration of the postgres primary replica
  primary:
    ## network policy configuration
    networkPolicy:
      enabled: false
    ## persistence volume claim configuration retention policy
    persistentVolumeClaimRetentionPolicy:
      enabled: true
      whenScaled: Retain
      whenDeleted: Retain
    initdb:
      # todo remove?
      scripts:
        create.sh: |
          psql postgresql://postgres:${POSTGRES_PASSWORD}@localhost:5432 -c "CREATE DATABASE wallet;"
        create-schema.sh: |
          psql postgresql://postgres:${POSTGRES_PASSWORD}@localhost:5432/wallet -c "CREATE SCHEMA wallet;"
