apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "dome-issuer-keycloak.fullname" . }}
  namespace: {{ $.Release.Namespace | quote }}
  labels:
    {{- include "dome-issuer-keycloak.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "dome-issuer-keycloak.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "dome-issuer-keycloak.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "dome-issuer-keycloak.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
        - name: certificate-init
          image: alpine:3.18
          command: ["/bin/sh", "-c"]
          args:
            - |
              #!/bin/sh

              # Install packages
              apk update
              apk add --no-cache curl openjdk11-jre openssl

              # Create a temporal storage
              echo "Creating temporal storage..."
              mkdir -p /opt/keycloak/conf/tmp
              cd /opt/keycloak/conf/tmp

              # Delete previous data: truststore, certificates and eu-lotl.xml
              echo "Deleting previous data: truststore, certificates and eu-lotl.xml"
              rm -f cert_* truststore.jks eu-lotl.xml

              # Create an empty truststore.jks if it doesn't exist
              if [ ! -f /opt/keycloak/conf/truststore.jks ]; then
                echo "Creating an empty truststore.jks"
                keytool -genkey -alias tempkey -keystore /opt/keycloak/conf/truststore.jks -storepass pempas -keypass pempas -dname "CN=Temp, OU=Temp, O=Temp, L=Temp, ST=Temp, C=US"
                keytool -delete -alias tempkey -keystore /opt/keycloak/conf/truststore.jks -storepass pempas
              fi

              # Download eu-lotl.xml file
              echo "Downloading eu-lotl.xml file..."
              curl -s https://sedediatid.mineco.gob.es/Prestadores/TSL/TSL.xml -o eu-lotl.xml

              if [ $? -ne 0 ]; then
                echo "Error downloading eu-lotl.xml file."
                exit 1
              fi

              # Validate that the file was downloaded successfully
              if [ ! -f eu-lotl.xml ]; then
                echo "eu-lotl.xml not found after download."
                exit 1
              fi

              echo "eu-lotl.xml downloaded successfully."

              # Extract certificates from eu-lotl.xml
              certificates=$(grep -o '<X509Certificate>[^<]*</X509Certificate>' eu-lotl.xml | sed -e 's/<X509Certificate>//g' -e 's/<\/X509Certificate>//g')
              count=1

              for certificate in $certificates; do
                file="cert_$count.pem"

                if [ -s "$file" ]; then
                  echo "$file does exist."
                else
                  echo "-----BEGIN CERTIFICATE-----" > "$file"
                  echo "$certificate" | fold -w 64 >> "$file"
                  echo "-----END CERTIFICATE-----" >> "$file"
                fi

                # Validate that the PEM file was created successfully
                if [ ! -f "$file" ]; then
                  echo "Failed to create $file"
                  exit 1
                fi

                # Validate that the PEM file is not empty
                echo "Content of $file:"
                cat "$file"

                # Generate a DER file from the PEM file
                if ! openssl x509 -in "$file" -out "cert_$count.der" -outform DER; then
                  echo "Failed to create cert_$count.der"
                  exit 1
                fi

                # Import the DER file to the truststore
                if ! echo "yes" | keytool -import -alias "cert_$count" -file "cert_$count.der" -keystore /opt/keycloak/conf/truststore.jks -storepass pempas; then
                  echo "Failed to import cert_$count.der to truststore.jks"
                  exit 1
                fi

                count=$((count + 1))
              done
              
              echo "Starting to adding hardcoded certificate"
              
              provided_cert="-----BEGIN CERTIFICATE-----
              MIIGVTCCBD2gAwIBAgIUE6p3XWaqV8widT0GgFecq9MbHl4wDQYJKoZIhvcNAQEN
              BQAwgbExIjAgBgNVBAMMGURJR0lURUwgVFMgQURWQU5DRUQgQ0EgRzIxEjAQBgNV
              BAUTCUI0NzQ0NzU2MDErMCkGA1UECwwiRElHSVRFTCBUUyBDRVJUSUZJQ0FUSU9O
              IEFVVEhPUklUWTEoMCYGA1UECgwfRElHSVRFTCBPTiBUUlVTVEVEIFNFUlZJQ0VT
              IFNMVTETMBEGA1UEBwwKVmFsbGFkb2xpZDELMAkGA1UEBhMCRVMwHhcNMjQwNTI5
              MTIwMDQwWhcNMzcwNTI2MTIwMDM5WjCBsTEiMCAGA1UEAwwZRElHSVRFTCBUUyBB
              RFZBTkNFRCBDQSBHMjESMBAGA1UEBRMJQjQ3NDQ3NTYwMSswKQYDVQQLDCJESUdJ
              VEVMIFRTIENFUlRJRklDQVRJT04gQVVUSE9SSVRZMSgwJgYDVQQKDB9ESUdJVEVM
              IE9OIFRSVVNURUQgU0VSVklDRVMgU0xVMRMwEQYDVQQHDApWYWxsYWRvbGlkMQsw
              CQYDVQQGEwJFUzCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAMOQaBJG
              UnKvx40KZD6EeuYMSxAAccsHyNJW6qMnk67nOPHB97gjRgnsJxehU8QPgxhObhq7
              kWc02vW8nQIS2qy70HjW+y6IMaOtlyksoNXOczQoZCnVqBIi/kDsOhFV1rcEXaiB
              ET/NuIrSKvGYEIdzA9JaqYdfi/JQ/lrYayDfP3d73hsuq+lIjN0d9h+pKcYwL/mI
              IbK/cQwllAUmddrAw9WEmqkl+5RuDWqplDWhhvpGJFPXt4RqKgaaVN5TUwS2OGJS
              NqCs6ZI+aSdneTgCqqQ//83hN9Qsm0mB0N8NO9lqSpCmPOjYGOTp7Ik8iB7tex1O
              NyeXMHl9zKDciqV162ZRpGtJm2ru86IUCSjPlsqTXMnW142MKugsW3X71Y0qx3DR
              U+3LwgcJqaO1Y/9D2kQEQJ3v5ZeiGQauRWqfjjAkERgh+8m3WXXLrnzAoFhrQdlB
              a1Q61I2UqbqxbA0dS9LdOt5+nFFVZm+E7AAeVyr8UjVWTdJQvTN3uq0VkL0n2pq0
              3+Hb4gPR8vrpD79JylyUcIR0QNIgMtEFe4eFJ+iC9+mbeOjzHQkl8ZG551X2Ky6s
              l3OOnf93XedQD0vG0rCYpRGZ+50k05jluKzRjciqACgLHCFSpcLyBSKgrXcA0qlp
              YDTIbex89TvRGY1nowrC5lmGNT8jJrxCYOYDAgMBAAGjYzBhMA8GA1UdEwEB/wQF
              MAMBAf8wHwYDVR0jBBgwFoAUghOhowKUzmIN4Aa2N1ZBcFxFriswHQYDVR0OBBYE
              FIIToaMClM5iDeAGtjdWQXBcRa4rMA4GA1UdDwEB/wQEAwIBhjANBgkqhkiG9w0B
              AQ0FAAOCAgEAJGQKrZ2U3J/SpGhP7zWjvweBXxjW5uSdx0V7mwv4mvC2VlC1TvxE
              n5yVndEUCplGp/m0S3A07BtPZ24ZSuRw+mIptBmChbnU1vj2BFpFFThpsQJG0kDj
              D23Ho6p3RtMrib8Ii0RnoUbwpP5N2LieObuod9OS9q3MgClhy9F99mOWvD/q5vCV
              o+uLWZuQ4acuTTNxa5DHyijgB+GGo2OhHldrSpp+LRgU5fkNKG0LzhlIEGdEBal0
              puZ/+QqtSrrLDMT4XPKWMJ6gpsr3lXfba0El7bb/756tMYAbXzmnkkUqdiOI57rV
              DFT9FJxjVgo5oW8XOKGSLqMH31XiJCNoH5rJY8VQ3ZmMSuh97kAAhXuFIbQZ7Frk
              F2y+GsKpb0a9ZUqFBrJlzHxCKl8SSTwfGDgcpePZxUIIgPPcI4oXwRoB0Hbt54Ir
              RoG7kWk68gX2cjKV0YtHmVhEEFr3diZfO7mATA54sLZX9n1losnf9xreEzdEYWby
              GThUwl33MP6XLaFRPdbnQshbroepzg+nksU5VVK2ZZFIWVY6g+RhICXVdhqkBpNm
              +eK0+wUCA1tXYyRKoSUVpMFSAZhnsyUeZzamPHDe4GkTamMK4qfXKQOb7EtWUWh5
              foVSzaqyvFppU4VMp/gKrPYHD6bWrHJ5vC/B7Wr/aPthNkgXFMGMrR0=
              -----END CERTIFICATE-----"

              echo "The hardcoded certificate: $provided_cert"
  
              echo "$provided_cert" > provided_cert.pem || handle_error "Failed to create provided_cert.pem"                           
              
              # Convert provided certificate to DER format
              openssl x509 -in provided_cert.pem -out provided_cert.der -outform DER || handle_error "Failed to convert provided_cert.pem to DER format"
              
              # Import the provided DER certificate to the truststore
              echo "yes" | keytool -import -alias "provided_cert" -file provided_cert.der -keystore /opt/keycloak/conf/truststore.jks -storepass pempas || handle_error "Failed to import provided_cert.der to truststore.jks"  
              
              echo "Finishing to adding hardcoded certificate"
              
              echo "Certificates imported to truststore."

              # List the content of the truststore
              echo "Truststore content:"
              keytool -list -keystore /opt/keycloak/conf/truststore.jks -storepass pempas

              # Clean up temporary files
              echo "Cleaning up temporary files."
              rm -f cert_* eu-lotl.xml

              echo "Cleanup completed."

          volumeMounts:
            - name: truststore-volume
              mountPath: /opt/keycloak/conf
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.app.internalServerPort }}
              protocol: TCP
          livenessProbe:
            httpGet:
              path: {{ .Values.livenessProbe.path }}
              port: {{ .Values.app.internalServerPort }}
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
          readinessProbe:
            httpGet:
              path: {{ .Values.readinessProbe.path }}
              port: {{ .Values.app.internalServerPort }}
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
          env:
            - name: KEYCLOAK_ADMIN
              value: {{ .Values.keycloak.admin.username }}
            - name: KEYCLOAK_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "keycloak.admin-secretName" . }}
                  key: {{ include "keycloak.admin-passwordKey" . }}
            - name: KC_HOSTNAME_URL
              value: "{{ .Values.keycloak.hostname.url.scheme }}://{{ .Values.keycloak.hostname.url.host }}{{ if not .Values.keycloak.hostname.url.externalService }}:{{ .Values.keycloak.hostname.url.internalPort }}{{ end }}{{ .Values.keycloak.hostname.url.path }}"
            - name: KC_HOSTNAME_ADMIN_URL
              value: "{{ .Values.keycloak.hostname.adminUrl.scheme }}://{{ .Values.keycloak.hostname.adminUrl.host }}{{ if not .Values.keycloak.hostname.adminUrl.externalService }}:{{ .Values.keycloak.hostname.adminUrl.internalPort }}{{ end }}{{ .Values.keycloak.hostname.adminUrl.path }}"
            - name: KC_HTTPS_CERTIFICATE_KEY_FILE
              value: {{ .Values.keycloak.https.certificateKeyFile }}
            - name: KC_HTTPS_CERTIFICATE_FILE
              value: {{ .Values.keycloak.https.certificateFile }}
            - name: KC_HTTPS_TRUST_STORE_FILE
              value: {{ .Values.keycloak.https.trustStoreFile }}
            - name: KC_HTTPS_TRUST_STORE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "keycloak.https-secretName" . }}
                  key: {{ include "keycloak.https-trustStorePasswordKey" . }}
            - name: KC_HTTPS_CLIENT_AUTH
              value: {{ .Values.keycloak.https.clientAuth }}
            - name: KC_DB
              value: {{ .Values.keycloak.db.type }}
            - name: KC_DB_USERNAME
              value: {{ .Values.keycloak.db.username }}
            - name: KC_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "keycloak.db-secretName" . }}
                  key: {{ include "keycloak.db-passwordKey" . }}
            - name: KC_DB_URL
              value: "jdbc:postgresql://{{ .Values.keycloak.db.host }}{{ if not .Values.keycloak.db.externalService }}:{{ .Values.keycloak.db.port }}{{ end }}/{{ .Values.keycloak.db.name }}"
            - name: ISSUER_API_URL
              value: "{{ .Values.issuerApi.externalUrl.scheme }}://{{ .Values.issuerApi.externalUrl.host }}{{ if not .Values.issuerApi.externalUrl.externalService }}:{{ .Values.issuerApi.externalUrl.internalPort }}{{ end }}{{ .Values.issuerApi.externalUrl.path }}"
            - name: ISSUER_API_EXTERNAL_URL
              value: {{ .Values.issuerApi.externalUrl }}
            - name: PRE_AUTH_LIFESPAN
              value: "{{ .Values.preAuth.lifespan }}"
            - name: PRE_AUTH_LIFESPAN_TIME_UNIT
              value: {{ .Values.preAuth.lifespanTimeUnit }}
            - name: TX_CODE_SIZE
              value: "{{ .Values.txCode.size }}"
            - name: TX_CODE_DESCRIPTION
              value: {{ .Values.txCode.description }}
            - name: TOKEN_EXPIRATION
              value: "{{ .Values.token.expiration }}"
          volumeMounts:
            - name: pem-volume
              mountPath: /opt/keycloak/pem
            - name: truststore-volume
              mountPath: /opt/keycloak/truststore

      volumes:
        - name: pem-volume
          secret:
            secretName: pem-secret
            items:
              - key: localhost-key.pem
                path: server.key.pem
              - key: localhost-crt.pem
                path: server.crt.pem
        - name: truststore-volume