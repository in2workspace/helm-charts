# Default values for example.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: in2workspace/in2-issuer-api
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: v1.6.3

# This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
# fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
# runAsNonRoot: true
# runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 80

ingress:
  enabled: false
  className: ""
  annotations:
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/rewrite-target: /$2
  hosts:
    - host: chart-example.local
      paths:
        - path: /api(/|$)(.*)
          pathType: ImplementationSpecific
        - path: /vci(/|$)(.*)
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

ingressWellKnown:
  enabled: false
  className: ""
  annotations: {}
  # kubernetes.io/ingress.class: nginx
  # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /.well-known/openid-configuration
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

ingressToken:
  enabled: false
  className: ""
  annotations: {}
  # kubernetes.io/ingress.class: nginx
  # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /token
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# This is to set up the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /health
  initialDelaySeconds: 40
  failureThreshold: 6
  periodSeconds: 10
readinessProbe:
  httpGet:
    path: /health
  initialDelaySeconds: 40
  failureThreshold: 6
  periodSeconds: 10

# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 5
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

# scripts before container initializes
initContainers:
# a script can be added to wait for Keycloak to be ready before initializing
# useful while working with internal Keycloak that isn't initialized yet
# todo: remove when external Keycloak is used
# - name: wait-for-keycloak
#   image: curlimages/curl
# url has to match keycloak health url
#   command:
#     - sh
#     - -c
#     - >
#       timeout 75 sh -c '
#         until curl -s http://dome-issuer-keycloak:80/keycloak/health;
#         do echo "waiting for keycloak..."; sleep 5; done'

app:
  logLevel:
    app: INFO
    security: INFO
  url: https://example.org
  issuerFrontedUrl: https://example.org
  trustFrameworkUrl: "http://localhost:8080"
  knowledgeBase:
    walletGuideUrl: "https://knowledgebase.com"
    uploadCertificationGuideUrl: "https://knowledgebase.com/upload-certification-guide"
  verifierUrl: "https://example.org"
  mail:
    host: smtp.example.org
    port: 587
    username: user
    password: password
    existingSecret:
      enabled: false
      name: mail-secret
      userKey: mail-user
      passwordKey: mail-password
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
          ssl:
            trust: smtp.example.org
  remoteSignature:
    clientId: client-id
    clientSecret: client-secret
    credentialId: credential-id
    credentialPassword: credential-password
    existingSecret:
      enabled: false
      name: remote-signature-secret
      clientId: client-id
      clientSecret: client-secret
      credentialId: credential-id
      credentialPassword: credential-password
    #Set to cloud if the remote signature service is not dss
    type: server
    url: https://example.org/dss
  authServer:
    provider: keycloak
    externalUrl: https://example.org/keycloak/realms/dome-issuer
    internalUrl: http://dome-issuer-keycloak:8080
    realm: dome-issuer
    client:
      clientId: issuer-backend-client
      username: user
      password: user
      existingSecret:
        enabled: false
        name: auth-secret
        clientSecretKey: client-secret
        clientPasswordKey: password
  defaultSigner:
    commonName: common-name
    country: country
    email: email
    organizationIdentifier: organization-identifier
    organization: organization
    serialNumber: serial-number
    existingSecret:
      enabled: false
      name: default-signer-secret
      commonName: common-name
      country: country
      email: email
      organizationIdentifier: organization-identifier
      organization: organization
      serialNumber: serial-number
  issuerIdentity:
    credentialDidKey: <CREDENTIAL_DID_KEY>
    jwtCredential: <ENCRYPTED_VC>
    privateKey: <PRIVATE_KEY>
    existingSecret:
      enabled: false
      name: issuer-identity-secret
      vc: vc
      privateKey: private-key
      credentialDidKey: credential-did-key
  cors:
    default:
      # expects a string of url's separated with comma and space
      allowedOrigins: "https://example.org"
    external:
      # expects a string of url's separated with comma and space
      allowedOrigins: "https://new.example.org, https://example-2.org"
  db:
    externalService: false
    schema: issuer
    host: issuer-postgres
    port: 5432
    name: issuer
    username: postgres
    password: postgres
    existingSecret:
      enabled: false
      name: db-secret
      key: password

  