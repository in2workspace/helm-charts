global:
  domain: "127.0.0.1.nip.io"
  ingress:
    enabled: false
    className: "nginx-acme"
    labels: {}
    annotations:
      nginx.ingress.kubernetes.io/ssl-redirect: "false"
      nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
      nginx.ingress.kubernetes.io/use-regex: "true"
      nginx.ingress.kubernetes.io/rewrite-target: /$2
    enableTLS: true
    clusterIssuer: "letsencrypt"

dome-issuer-backend:
  fullnameOverride: "dome-issuer-backend"
  image:
    # -- image pull policy
    pullPolicy: IfNotPresent
    # -- image tag
    tag: v1.6.3
  # ingress specific configuration
  ingress:
    enabled: false
  ingressWellKnown:
    enabled: false
    className: ""
    annotations: { }
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
    hosts:
      - host: chart-example.local
        paths:
          - path: /.well-known/openid-configuration
            pathType: ImplementationSpecific
    tls: [ ]
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local
  ingressToken:
    enabled: false
    className: ""
    annotations: { }
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
    hosts:
      - host: chart-example.local
        paths:
          - path: /token
            pathType: ImplementationSpecific
    tls: [ ]
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local
  # scripts before container initializes
  initContainers:
  # a script can be added to wait for Keycloak to be ready before initializing
  # useful while working with internal Keycloak that isn't initialized yet
  # todo: remove when external Keycloak is used
  # - name: wait-for-keycloak
  #   image: curlimages/curl
  # url has to match keycloak health url
  #   command:
  #     - sh
  #     - -c
  #     - >
  #       timeout 75 sh -c '
  #         until curl -s http://dome-wallet-keycloak:80/keycloak/health;
  #         do echo "waiting for keycloak..."; sleep 5; done'
  ## deployment specific configuration
  app:
    logLevel:
      app: INFO
      security: INFO
    url: https://example.org
    issuerFrontedUrl: https://example.org
    trustFrameworkUrl: "http://localhost:8080"
    knowledgeBase:
      walletGuideUrl: "https://knowledgebase.com"
      uploadCertificationGuideUrl: "https://knowledgebase.com/upload-certification-guide"
    verifierUrl: "https://example.org"
    mail:
      host: smtp.example.org
      port: 587
      username: user
      password: password
      existingSecret:
        enabled: false
        name: mail-secret
        userKey: mail-user
        passwordKey: mail-password
      properties:
        mail:
          smtp:
            auth: true
            starttls:
              enable: true
            ssl:
              trust: smtp.example.org
    remoteSignature:
      clientId: client-id
      clientSecret: client-secret
      credentialId: credential-id
      credentialPassword: credential-password
      existingSecret:
        enabled: false
        name: remote-signature-secret
        clientId: client-id
        clientSecret: client-secret
        credentialId: credential-id
        credentialPassword: credential-password
      #Set to cloud if the remote signature service is not dss
      type: server
      url: https://example.org/dss
    authServer:
      provider: keycloak
      externalUrl: https://example.org/keycloak/realms/dome-issuer
      internalUrl: http://dome-issuer-keycloak:8080
      realm: dome-issuer
      client:
        clientId: issuer-backend-client
        username: user
        password: user
        existingSecret:
          enabled: false
          name: auth-secret
          clientSecretKey: client-secret
          clientPasswordKey: password
    defaultSigner:
      commonName: common-name
      country: country
      email: email
      organizationIdentifier: organization-identifier
      organization: organization
      serialNumber: serial-number
      existingSecret:
        enabled: false
        name: default-signer-secret
        commonName: common-name
        country: country
        email: email
        organizationIdentifier: organization-identifier
        organization: organization
        serialNumber: serial-number
    issuerIdentity:
      credentialDidKey: <CREDENTIAL_DID_KEY>
      jwtCredential: <ENCRYPTED_VC>
      privateKey: <PRIVATE_KEY>
      existingSecret:
        enabled: false
        name: issuer-identity-secret
        vc: vc
        privateKey: private-key
        credentialDidKey: credential-did-key
    cors:
      default:
        # expects a string of url's separated with comma and space
        allowedOrigins: "https://example.org"
      external:
        # expects a string of url's separated with comma and space
        allowedOrigins: "https://new.example.org, https://example-2.org"
    db:
      externalService: false
      schema: issuer
      host: issuer-postgres
      port: 5432
      name: issuer
      username: postgres
      password: postgres
      existingSecret:
        enabled: false
        name: db-secret
        key: password

dome-issuer-frontend:
  fullnameOverride: "dome-issuer-frontend"
  image:
    # -- image pull policy
    pullPolicy: IfNotPresent
    # -- image tag
    tag: v1.10.2
    # ingress specific configuration
  ingress:
    enabled: false
  app:
    colors:
      primary: "#2d58a7"
      primaryContrast: "#ffffff"
      secondary: "#2cb6b2"
      secondaryContrast: "#dde6f6"
    logoSrc: "assets/logos/no-image.png"
    faviconSrc: "assets/logos/no-image.png"
    keycloakUrl: "https://keycloak.127.0.0.1.nip.io/realms/issuer"
    backendUrl: "https://issuer.127.0.0.1.nip.io/issuer-api"
    walletUrl: "https://wallet.127.0.1.nip.io"
    knowledgeBaseUrl: "https://knowledgebase.example.com"

dome-issuer-postgresql:
  # -- should the postgresql deployment be enabled
  enabled: true
  # -- overrides the generated name, provides stable service names - this should be avoided if multiple instances are available in the same namespace
  fullnameOverride: issuer-postgres
  # -- overrides the generated name, provides stable service names - this should be avoided if multiple instances are available in the same namespace
  nameOverride: issuer-postgres
  ## auth configuration for the database
  auth:
    # -- username to be used
    username: postgres
    # -- should the default postgres user be enabled
    enablePostgresUser: true
    # -- password to be used
    password: postgres
  ## configuration of the postgres primary replica
  primary:
    ## provide db initialization
    initdb:
      ## provide scripts for initialization
      scripts:
        # -- create the database
        # -- !!Put the same database name and the same database schema
        create.sh: |
          psql postgresql://postgres:${POSTGRES_PASSWORD}@localhost:5432 -c "CREATE DATABASE issuer;"

dome-issuer-keycloak:
  # Keycloak Configuration
  keycloak:
    proxy: edge
    logsCertsLevel: TRACE
    logLevel: DEBUG
    admin:
      username: admin
      password: admin
      existingSecret:
        enabled: false
        name: keycloak-secrets
        passwordKey: keycloakAdminPassword
    relativePath: /keycloak
    hostname:
      url:
        # if deployed locally set to false
        externalService: true
        scheme: http
        # change by the external url or set to localhost if deployed locally
        host: example.org
        # internalPort is only used if externalService is false
        internalPort: 30002
        path: /
      adminUrl:
        # if deployed locally set to false
        externalService: true
        scheme: http
        # change by the external url or set to localhost if deployed locally
        host: example.org
        # internalPort is only used if externalService is false
        internalPort: 30002
        path: /
    https:
      trustStoreFile: /opt/keycloak/truststore/truststore.jks
      trustStorePassword: pempas
      existingSecret:
        enabled: false
        name: keycloak-secrets
        trustStorePasswordKey: keycloakTrustStorePassword
      clientAuth: request
    db:
      host: issuer-keycloak-postgres
      port: 5432
      externalService: false
      name: cred
      username: postgres
      password: postgres
      existingSecret:
        enabled: false
        name: keycloak-secrets
        passwordKey: keycloakDbPassword
    mail:
      host: smtp.ionos.de
      port: 587
      from: example@example.org
      fromDisplayName: Example
      replyTo: example@example.org
      username: user
      password: password
      existingSecret:
        enabled: false
        name: mail-secret
        userKey: mail-username
        passwordKey: mail-password
      properties:
        mail:
          smtp:
            auth: true
            starttls:
              enable: true
            ssl:
              enable: false
  # Issuer API Configuration
  issuerApi:
    url: http://issuer-api:8080
    externalUrl:
      # if deployed locally set to false
      externalService: true
      scheme: http
      # change by the external url or set to localhost if deployed locally
      host: example.org
      # internalPort is only used if externalService is false
      internalPort: 30001
      path: /
  # Pre-authorization Configuration
  preAuth:
    lifespan: 10
    lifespanTimeUnit: MINUTES
  # Token Configuration
  token:
    expiration: 2592000

dome-issuer-keycloak-postgresql:
  # -- should the postgresql deployment be enabled
  enabled: true
  # -- overrides the generated name, provides stable service names - this should be avoided if multiple instances are available in the same namespace
  fullnameOverride: issuer-keycloak-postgres
  # -- overrides the generated name, provides stable service names - this should be avoided if multiple instances are available in the same namespace
  nameOverride: issuer-keycloak-postgres
  ## auth configuration for the database
  auth:
    # -- username to be used
    username: postgres
    # -- should the default postgres user be enabled
    enablePostgresUser: true
    # -- password to be used
    password: postgres
  ## configuration of the postgres primary replica
  primary:
    ## provide db initialization
    initdb:
      ## provide scripts for initialization
      scripts:
        # -- create the database
        create.sh: |
          psql postgresql://postgres:${POSTGRES_PASSWORD}@localhost:5432 -c "CREATE DATABASE cred;"
