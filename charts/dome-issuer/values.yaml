global:
  domain: "127.0.0.1.nip.io"
  ingress:
    enabled: false
    className: "nginx-acme"
    labels: {}
    annotations:
      nginx.ingress.kubernetes.io/ssl-redirect: "false"
      nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    enableTLS: true
    clusterIssuer: "letsencrypt"

dome-issuer-backend:
  fullnameOverride: "dome-issuer-backend"
  image:
    # -- image pull policy
    pullPolicy: IfNotPresent
    # -- image tag
    tag: v1.6.3
  # ingress specific configuration
  ingress:
    enabled: false
  ingressIssuerApi:
    enabled: false
    className: ""
    annotations: { }
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
    hosts:
      - host: chart-example.local
        paths:
          - path: /issuer-api
            pathType: ImplementationSpecific
    tls: [ ]
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local
  # scripts before container initializes
  initContainers:
  # a script can be added to wait for Keycloak to be ready before initializing
  # useful while working with internal Keycloak that isn't initialized yet
  # todo: remove when external Keycloak is used
  # - name: wait-for-keycloak
  #   image: curlimages/curl
  # url has to match keycloak health url
  #   command:
  #     - sh
  #     - -c
  #     - >
  #       timeout 75 sh -c '
  #         until curl -s http://dome-wallet-keycloak:80/keycloak/health;
  #         do echo "waiting for keycloak..."; sleep 5; done'
  ## deployment specific configuration
  app:
    logLevel:
      app: INFO
      security: INFO
    url: https://example.org
    issuerFrontendUrl: https://example.org
    trustFrameworkUrl: "http://localhost:8080"
    knowledgeBase:
      walletGuideUrl: "https://knowledgebase.com"
      uploadCertificationGuideUrl: "https://knowledgebase.com/upload-certification-guide"
    verifierUrl: "https://example.org"
    mail:
      host: smtp.example.org
      port: 587
      username: user
      password: password
      existingSecret:
        enabled: false
        name: dome-issuer-sealed-secret
        userKey: mail-username
        passwordKey: mail-password
      properties:
        mail:
          smtp:
            auth: true
            starttls:
              enable: true
            ssl:
              trust: smtp.example.org
    remoteSignature:
      clientId: client-id
      clientSecret: client-secret
      credentialId: credential-id
      credentialPassword: credential-password
      existingSecret:
        enabled: false
        name: dome-issuer-sealed-secret
        clientId: remote-signature-client-id
        clientSecret: remote-signature-client-secret
        credentialId: remote-signature-credential-id
        credentialPassword: remote-signature-credential-password
      #Set to cloud if the remote signature service is not dss
      type: server
      url: https://example.org/dss
    authServer:
      provider: keycloak
      externalUrl: https://example.org/keycloak/realms/dome-issuer
      internalUrl: http://dome-issuer-keycloak:8080
      realm: dome-issuer
      client:
        clientId: issuer-backend-client
        username: user
        password: user
        existingSecret:
          enabled: false
          name: dome-issuer-sealed-secret
          clientPasswordKey: auth-server-password
    defaultSigner:
      commonName: common-name
      country: country
      email: email
      organizationIdentifier: organization-identifier
      organization: organization
      serialNumber: serial-number
      existingSecret:
        enabled: false
        name: dome-issuer-sealed-secret
        commonName: common-name
        country: country
        email: email
        organizationIdentifier: organization-identifier
        organization: organization
        serialNumber: serial-number
    issuerIdentity:
      credentialDidKey: <CREDENTIAL_DID_KEY>
      jwtCredential: <ENCRYPTED_VC>
      privateKey: <PRIVATE_KEY>
      existingSecret:
        enabled: false
        name: dome-issuer-sealed-secret
        vc: issuer-identity-vc
        privateKey: issuer-identity-key
        credentialDidKey: issuer-identity-credential-did-key
    cors:
      default:
        # expects a string of url's separated with comma and space
        allowedOrigins: "https://example.org"
      external:
        # expects a string of url's separated with comma and space
        allowedOrigins: "https://new.example.org, https://example-2.org"
    db:
      externalService: false
      schema: issuer
      host: issuer-postgres
      port: 5432
      name: issuer
      username: postgres
      password: postgres
      existingSecret:
        enabled: false
        name: dome-issuer-sealed-secret
        key: postgres-password

dome-issuer-frontend:
  fullnameOverride: "dome-issuer-frontend"
  image:
    # -- image pull policy
    pullPolicy: IfNotPresent
    # -- image tag
    tag: v1.10.2
    # ingress specific configuration
  ingress:
    enabled: false
  app:
    colors:
      primary: "#2d58a7"
      primaryContrast: "#ffffff"
      secondary: "#2cb6b2"
      secondaryContrast: "#dde6f6"
    logoSrc: "assets/logos/no-image.png"
    faviconSrc: "assets/logos/no-image.png"
    keycloakUrl: "https://keycloak.127.0.0.1.nip.io/realms/issuer"
    backendUrl: "https://issuer.127.0.0.1.nip.io/issuer-api"
    walletUrl: "https://wallet.127.0.1.nip.io"
    knowledgeBaseUrl: "https://knowledgebase.example.com"

dome-issuer-postgresql:
  # -- should the postgresql deployment be enabled
  enabled: true
  # -- overrides the generated name, provides stable service names - this should be avoided if multiple instances are available in the same namespace
  # ! Changing this parameter may cause the PVC to re-created and the data lost
  fullnameOverride: issuer-postgres
  # -- overrides the generated name, provides stable service names - this should be avoided if multiple instances are available in the same namespace
  # ! Changing this parameter may cause the PVC to re-created and the data lost
  nameOverride: issuer-postgres
  ## auth configuration for the database
  auth:
    # -- username to be used
    username: postgres
    # -- should the default postgres user be enabled
    enablePostgresUser: true
    # -- password to be used
    password: postgres
  ## configuration of the postgres primary replica
  primary:
    # Configuration for Velero backup
    annotations:
      backup.velero.io/backup-volumes: data
    podAnnotations:
      backup.velero.io/backup-volumes: data
    ## provide db initialization
    initdb:
      ## provide scripts for initialization
      scripts:
        # -- create the database
        # -- !!Put the same database name and the same database schema
        create.sh: |
          psql postgresql://postgres:${POSTGRES_PASSWORD}@localhost:5432 -c "CREATE DATABASE issuer;"

dome-issuer-keycloak:
  nameOverride: dome-issuer-keycloak
  fullnameOverride: dome-issuer-keycloak
  # -- should be enabled?
  enabled: true
  ## ingress specific configuration
  ingress:
    enabled: false
    className: ""
    annotations: { }
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
    hosts:
      - host: chart-example.local
        paths:
          - path: /keycloak
            pathType: Prefix
    tls:
      - hosts:
          - example-host
        secretName: example-secret
  app:
    keycloak:
      internalServerPort: 8080
      proxyHeaders: edge
      logsCertsLevel: INFO
      logLevel: INFO
      admin:
        username: admin
        password: admin
        existingSecret:
          # -- should an existing secret be used
          enabled: false
          # -- name of the secret
          name: keycloak-admin-secret
          # -- key to retrieve the password from
          passwordKey: keycloakAdminPassword
      hostnameUrl: "http://dome-wallet-keycloak:80"
      adminUrl: "http://dome-wallet-keycloak:80/admin"
      https:
        clientAuth: request

    db:
      type: postgres
      host: dome-issuer-keycloak-postgres
      port: 5432
      externalService: true
      name: keycloak
      username: postgres
      password: postgres
      existingSecret:
        # -- should an existing secret be used
        enabled: false
        # -- name of the secret
        name: dome-wallet-keycloak-secret
        # -- key to retrieve the password from
        passwordKey: keycloak-db-password

dome-issuer-keycloak-postgresql:
  # -- should the postgresql deployment be enabled
  enabled: true
  # -- overrides the generated name, provides stable service names - this should be avoided if multiple instances are available in the same namespace
  # ! Changing this parameter may cause the PVC to re-created and the data lost
  fullnameOverride: issuer-keycloak-postgres
  # -- overrides the generated name, provides stable service names - this should be avoided if multiple instances are available in the same namespace
  # ! Changing this parameter may cause the PVC to re-created and the data lost
  nameOverride: issuer-keycloak-postgres
  ## auth configuration for the database
  auth:
    # -- username to be used
    username: postgres
    # -- should the default postgres user be enabled
    enablePostgresUser: true
    # -- password to be used
    password: postgres
  ## configuration of the postgres primary replica
  primary:
    # Configuration for Velero backup
    annotations:
      backup.velero.io/backup-volumes: data
    podAnnotations:
      backup.velero.io/backup-volumes: data
    ## provide db initialization
    initdb:
      ## provide scripts for initialization
      scripts:
        # -- create the database
        create.sh: |
          psql postgresql://postgres:${POSTGRES_PASSWORD}@localhost:5432 -c "CREATE DATABASE cred;"
