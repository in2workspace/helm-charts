replicaCount: 1

image:
  repository: in2workspace/issuer-api
  # Overrides the image tag whose default is the chart appVersion.
  tag: v0.8.0-SNAPSHOT
  pullPolicy: Always

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""


podAnnotations: {}
podLabels: {}

podSecurityContext: {}
# fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
# runAsUser: 1000

service:
  type: ClusterIP
  port: 8080

readinessProbe:
  path: /issuer-api/health
  initialDelaySeconds: 40
  failureThreshold: 6
  periodSeconds: 10

livenessProbe:
  path: /issuer-api/health
  initialDelaySeconds: 40
  failureThreshold: 6
  periodSeconds: 10

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
  # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /issuer-api
          pathType: ImplementationSpecific
  tls:
    - hosts:
        - example-host
      secretName: example-secret


resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
#   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

app:
  profile: default
  logLevel: DEBUG
  basePath: /issuer-api
  internalServerPort: 8080
  mail:
    host: smtp.example.org
    port: 587
    username: user
    password: password
    existingSecret:
      enabled: false
      name: mail-secret
      userKey: mail-user
      passwordKey: mail-password
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
          ssl:
            trust: smtp.example.org
  api:
    externalDomain: https://issuer.dome-marketplace-sbx.org/issuer-api
    internalDomain: http://issuer-api:8080
    configSource: yaml
    cacheLifetimeCredentialOffer: 10
    cacheLifetimeVerifiableCredential: 10
  authServer:
    provider: keycloak
    externalDomain: https://issuer.dome-marketplace-sbx.org/keycloak
    internalDomain: http://dome-issuer-keycloak:8080
    realm: CredentialIssuer
    client:
      clientId: oidc4vci-wallet-client
      clientSecret: oidc4vci-wallet-client-secret
      username: user
      password: user
      existingSecret:
        enabled: false
        name: auth-secret
        clientSecretKey: client-secret
        passwordKey: password
    paths:
      tokenPath: /realms/CredentialIssuer/protocol/openid-connect/token
  ui:
    externalDomain: https://issuer.dome-marketplace-sbx.org
    internalDomain: http://issuer-ui:8080

db:
  host: issuer-postgres
  port: 5432
  externalService: false
  name: issuer
  username: postgres
  password: postgres
  existingSecret:
    enabled: false
    name: db-secret
    key: password

  