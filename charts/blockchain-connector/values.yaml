## Default values for blockchain-connector-core.
## This is a YAML-formatted file.
## Declare variables to be passed into your templates.

# -- option to override the name config in the _helpers.tpl
nameOverride: ""

# -- option to override the fullname config in the _helpers.tpl
fullnameOverride: ""

## configuration for the k8s service to access blockchain-connector-core
service:
  # -- service type
  type: ClusterIP
  # -- port to be used by the service
  port: 8080
  # -- additional annotations, if required
  annotations: { }

# -- if a blockchain-connector-core specific service account should be used, it can be configured here
# ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
serviceAccount:
  # -- specifies if the account should be created
  create: false

## deployment specific configuration
deployment:
  # -- initial number of target replications, can be different if autoscaling is enabled
  replicaCount: 1
  # -- number of old replicas to be retained
  revisionHistoryLimit: 3
  ## configuration of the blockchain-connector-core update strategy
  updateStrategy:
    # -- type of the update
    type: RollingUpdate
    # -- new pods will be added gradually
    rollingUpdate:
      # -- number of pods that can be created above the desired amount while updating
      maxSurge: 1
      # -- number of pods that can be unavailable while updating
      maxUnavailable: 0
  ## configuration of the image to be used
  image:
    # -- blockchain-connector image name
    # ref: https://hub.docker.com/r/in2kizuna/blockchain-connector
    repository: in2kizuna/blockchain-connector
    # -- tag of the image to be used
    tag: 1.0.0
    # -- specification of the image pull policy
    pullPolicy: IfNotPresent
  # -- additional labels for the deployment, if required
  additionalLabels: { }
  # -- additional annotations for the deployment, if required
  additionalAnnotations: { }
  ## blockchain-connector-core resource requests and limits, we leave the default empty to make that a conscious
  ## choice by the user. For the autoscaling to make sense, you should configure this.
  # resources:
  #   limits:
  #     cpu: 100m
  #     memory: 128Mi
  #     requests:
  #     cpu: 100m
  #     memory: 128Mi
  # -- selector template
  # ref: https://kubernetes.io/docs/user-guide/node-selection/
  nodeSelector: { }
  # -- tolerations template
  # ref: ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  tolerations: [ ]
  # -- affinity template
  # ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  affinity: { }
  # -- port to request health information at
  healthPort: 9090
  ## liveness and readiness probes
  # ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
  livenessProbe:
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 30
  readinessProbe:
    initialDelaySeconds: 31
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 30

## pod autoscaling configuration, use for automatic scaling of the broker pods
autoscaling:
  #  -- should autoscaling be enabled for til
  enabled: false
  # -- minimum number of running pods
  minReplicas: 1
  # -- maximum number of running pods
  maxReplicas: 10
  # -- metrics to react on
  metrics: [ ]
  ## List of MetricSpecs to decide whether to scale
  # See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.17/#metricspec-v2beta2-autoscaling
  # scaler targets to hold average cpu around 80%
  #- type: Resource
  #  resource:
  #    name: cpu
  #     target:
  #      type: Utilization
  #      averageUtilization: 80
  ## scaler targets to hold average memory around 80%
  #  - type: Resource
  #    resource:
  #      name: memory
  #      target:
  #        type: Utilization
  #        averageUtilization: 80

### If no external access is required(and no template for ingress ore route exists), no such values should exist

# -- port that the blockchain-connector-core container uses
port: 8080

## Is the prometheus dependency part of the application? I also was(currently) not able to reach 9090

## configuration for prometheus monitoring
prometheus:
  # -- should prometheus scrape be enabled
  enabled: true
  # -- path for prometheus scrape
  path: /prometheus
  # -- port prometheus scrape is available at
  port: 9090

spring:
  r2dbc:
    url: r2dbc:postgresql://mkt-postgres:5432/mktdb
    username: postgres
    password: postgres
  flyway:
    url: jdbc:postgresql://mkt-postgres:5432/mktdb
logging:
    level:
      es.in2.blockchain.connector: DEBUG
openapi:
    server:
      url: https://localhost:9091
      description: Blockchain Connector Test Server
    info:
        title: Blockchain Connector
        description: Blockchain Connector Component
        version: 2.0.0-SNAPSHOT
        termsOfService: https://example.com/terms
        license:
            name: Apache 2.0
            url: https://www.apache.org/licenses/LICENSE-2.0.html
        contact:
            name: IN2, Ingeniería de la Información S.L.
            url: https://in2.es
            email:
operator:
  organizationId: VATES-99999999
dlt:
  adapter:
    domain: http://dlt-adapter:8080
blockchain:
  rpcAddress: https://red-t.alastria.io/v0/9461d9f4292b41230527d57ee90652a6
  userEthereumAddress: "0xb794f5ea0ba39494ce839613fffba74279579268"
  subscription:
    active: true
    notificationEndpoint: http://blockchain-connector:8080/notifications/dlt
    eventTypes: ProductOffering, ProductOrder
broker:
  externalDomain: https://example.com/scorpio
  internalDomain: http://scorpio:9090
ngsi:
  subscription:
    notificationEndpoint: http://blockchain-connector:8080/notifications/broker
    entityTypes: ProductOffering, ProductOrder
broker-adapter:
    domain: http://broker-adapter:8080
    paths:
      entities: /api/v2/entities
      subscriptions: /api/v2/subscriptions

# -- a list of additional env vars to be set, check the blockchain-connector-core doc for all available options
additionalEnvVars: [ ]
